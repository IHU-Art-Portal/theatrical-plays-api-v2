stages: [prerequisites, build, test, deliver, deploy]

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "shceduled"
    - if: $CI_COMMIT_TAG != null

default:
  image: mcr.microsoft.com/dotnet/sdk:6.0

variables:
  BUILD_DIR: build
  DEPENDENCIES_DIR: dependencies
  IMAGE_PLATFORMS: "linux/amd64,linux/arm64"

# dotnet-restore:
#   stage: prerequisites
#   script:
#     - dotnet restore --use-lock-file --packages ${DEPENDENCIES_DIR}
#   cache: &dependencies_cache
#     key: "[Dependencies]: $CI_COMMIT_REF_SLUG"
#     paths: [$DEPENDENCIES_DIR]
#     policy: pull-push
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# dotnet-compile:
#   stage: build
#   # cache: 
#   #   - <<: *dependencies_cache
#   #     policy: pull
#   script:
#     - dotnet ${BUILD_COMMAND:-build} -o ${BUILD_DIR} #--no-restore
#   #needs: [dotnet-restore]
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG != null
#       variables: 
#         BUILD_COMMAND: "publish"

# dotnet-test:
#   stage: test
#   # cache: 
#   #   - <<: *dependencies_cache
#   #     policy: pull
#   script:
#     - dotnet test -o ${BUILD_DIR} #--no-restore
#   #needs: [dotnet-restore]
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

docker-build:
  stage: deliver
  image: docker:25.0.3-alpine3.19
  services:
    - name: docker:25.0.3-dind-alpine3.19
      alias: docker
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker buildx create --platform ${IMAGE_PLATFORMS} --name ci-build --use
    - docker buildx build --push --platform ${IMAGE_PLATFORMS}
      -t ${CI_REGISTRY_IMAGE}:${SPECIFIC_TAG}
      -t ${CI_REGISTRY_IMAGE}:${LATEST_TAG}
      -f ${DOCKERFILE_DIR:-.}/${DOCKERFILE:-Dockerfile}
      ${DOCKERFILE_DIR:-.}
  #needs: [dotnet-compile]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables: 
        SPECIFIC_TAG: "candidate-${CI_COMMIT_SHORT_SHA}"
        LATEST_TAG: "candidate-latest"
    - if: $CI_COMMIT_BRANCH
      when: manual
      variables:
        SPECIFIC_TAG: "${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
        LATEST_TAG: "${CI_COMMIT_BRANCH}-latest"
    - if: $CI_COMMIT_TAG != null
      variables: 
        SPECIFIC_TAG: "${CI_COMMIT_TAG}"
        LATEST_TAG: "latest"

docker-deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - which ssh-agent || ( apk add --no-cache --update openssh-client )
    - eval $(ssh-agent -s)
  script:
    - ssh -l ${SSH_USER} -i ${SSH_KEY} -v http://cs1msa.iee.ihu.gr/
    - docker run -d -p 80:80 ${CI_REGISTRY_IMAGE}:${SPECIFIC_TAG}
  needs: [docker-build]
  rules: !reference [docker-build, rules]
